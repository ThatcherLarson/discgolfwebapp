import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  discsList: [],
  status: 'idle',
};

export const discsSlice = createSlice({
  name: 'discs',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addDisc: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.discsList.concat(action.payload)
      console.log("Added a disc!")
    },
    removeDisc: (state, action) => {
      console.log("Removed a disc!")
      return state.discsList.filter((disc) => disc.id !== action.payload)
    },
    getDiscs: (state, action) => {
      console.log("Getting list of Discs")
      state.discsList = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { addDisc, removeDisc, getDiscs} = discsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

// Asynchronous thunk action


export default discsSlice.reducer;
